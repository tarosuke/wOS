include ../../common.mk

###################################################################### MODULES

# kernel modules
ksrcs = $(wildcard ../../kernel/code/*)\
	$(wildcard ../../cpu/$(cpu)/code/*)\
	$(wildcard ../../arch/$(arch)/code/*)
kmods = $(basename $(notdir $(ksrcs)))
kobjs = $(addsuffix .o, $(kmods))

# user library modules
ulsrcs = $(wildcard ../../userlib/code/*)
ulmods = $(basename $(notdir $(ulsrcs)))
ulobjs = $(addsuffix .o, $(ulmods))

# user modules
usrcs = $(wildcard ../../servers/*/*)
umods = $(basename $(notdir $(usrcs)))
uobjs = $(addsuffix .o, $(umods))


mods = $(kmods) $(umods)
-include $(addsuffix .d, $(mods))


################################################################# SOURCE PATHs
VPATH =
VPATH += ../../arch/$(arch)/code ../../cpu/$(cpu)/code ../../kernel/code
VPATH += ../../userlib/code



################################################################# HEADER PATHs
incs = ../../include ../../kernel/include ../../cpu/$(cpu)/include ../../arch/$(arch)/include ../../userlib/include



############################################################### EXPLICIT RULES
ulib.o : $(ulobjs) $(keyfiles) ../../userlib/userlib.lds
	@echo $@
	@$(LD) -N --cref -nostdlib -r -T ../../userlib/userlib.lds -o $@ -Map ulib.map $(ulobjs)
	@$(prefix)objdump -xdS ulib.o > ulib.dis

libuser.a : $(uobjs) $(keyfiles)
	@echo $@
	@$(AR) -rc $@ $(uobjs)

servers.a :

wOS : ulib.o libuser.a target.lds $(kobjs) $(ldkeyfiles)
	@echo $@
	@$(LD) $(ldopts) -T target.lds -o wOS.elf -Map wOS.map --start-group $(kobjs) --end-group
	@$(OC) -O binary wOS.elf wOS
	@$(prefix)objdump -xdS wOS.elf > wOS.dis



############################################################### APPENDIX FILES
ifneq ($(MAKECMDGOALS),gnutools)
font.o : fonts.inc
fonts.inc : cnvfonts $(wildcard ../../misc/fonts/*.bdf)
	@echo $@
	@./cnvfonts $(wildcard ../../misc/fonts/*.bdf) > fonts.inc
cnvfonts : ../../misc/utils/cnvfonts.cc ../../include/charsets.h
	g++ -Wall -Werror -O3 -o $@ $<

embededs.o : images.inc
images.inc : cnvimage $(wildcard ../../misc/images/*)
	@./cnvimage $(basename $(notdir $(wildcard ../../misc/images/*.ppm))) > images.inc
cnvimage : ../../misc/utils/cnvimage.cc
	g++ -Wall -Werror -O3 -o $@ $<

event.o : keymaps.inc
keymaps.inc : cnvkeymap $(wildcard ../../misc/keymaps/*.km)
	@./cnvkeymap ../../misc/keymaps $(notdir $(wildcard ../../misc/keymaps/*.km)) > $@
cnvkeymap : ../../misc/utils/cnvkeymap.cc
	g++ -Wall -Werror -O3 -I. -o $@ $<
endif



############################################################### MAINTAIN RULES
.PHONY : clean reconf indent count todo backup-repository conf

reconf :
	cp ../../arch/$(arch)/makefile .
	cp ../../arch/$(arch)/wOS.conf $@

indent :

count:
	@cat $(ksrcs) $(ulsrcs) $(srcs) $(drvSrcs) \
		$(wildcard ../../include/*.h) \
		$(wildcard ../../include/*/*.h) \
		$(wildcard ../../cpu/$(cpu)/include/cpu/*) \
		$(wildcard ../../cpu/$(cpu)/include/*.h) \
		$(wildcard ../../arch/$(arch)/include/arch/*) \
		$(wildcard ../../arch/$(arch)/include/*.h) | wc -l

clean :
	rm -rf *.o *.ko *.d *.i *.s *.c *.bdf *.inc wOS* *image *.a *loader* cnvfonts cnvimage cnvkeymap

conf: wOS.conf
	@$(EDITOR) wOS.conf



###################################################### DOCUMENT MAINTAIN RULES
contents = ../../docs/htdocs/.htaccess $(wildcard ../../docs/htdocs/*)
expath = $(USER)@shell.sf.net:/home/groups/t/ta/wOS-kernel/htdocs
datecode := $(shell date +%g%m%d%H)

.PHONY: doxygen upload uploadBinaries upload-drafts

doxygen:
	doxygen ../../doxyfile

upload:
	chmod 644 $(contents)
	rsync --progress --exclude='.svn' -avzhe ssh $(contents) $(expath)

uploadBinaries:
	cp wOS.fd /var/www/wOS.tarosuke.net/binaries/$(datecode).fd
	cp wOS.iso /var/www/wOS.tarosuke.net/binaries/$(datecode).iso
	chmod 644 /var/www/wOS.tarosuke.net/binaries/$(datecode).fd
	chmod 644 /var/www/wOS.tarosuke.net/binaries/$(datecode).iso

upload-drafts:
	rsync --progress --delete --exclude=".svn" -av $(wildcard ../../docs/htdocs/*) /var/www/wOS.tarosuke.net/



################################################### ENVIRONMENT BUILDING RULES
.PHONY: gnutools gnutools-clean

gccVer = 4.6.3
binutilsVer = 2.22
toolPath = $(shell pwd)/../tools
buildDir = $(toolPath)/$(gnuArch)

binutilsOptions = --target=$(gnuArch)-wOS-elf --prefix=$(toolPath)\
 --with-included-gettext --without-libintl-prefix\
 --disable-shared --disable-nls --disable-werror
gccOptions = --target=$(gnuArch)-wOS-elf --prefix=$(toolPath)\
 --enable-languages=c,c++\
 --with-gnu-as=$(toolPath)/bin/$(gnuArch)-wOS-elf-as\
 --with-gnu-ld=$(toolPath)/bin/$(gnuArch)-wOS-elf-ld\
 --without-header --disable-shared --disable-nls --disable-__cxa_atexit\
 --disable-thread --disable-clocale --disable-multilib

binutilsName = binutils-$(binutilsVer)
gccName = gcc-$(gccVer)

ifeq ($(gnuArch),stub)
prefix =
else
prefix = $(toolPath)/bin/$(gnuArch)-wOS-elf-
endif

gnutools: $(prefix)as $(prefix)gcc


##### maintain
gnutools-clean:
	if [ -f $(buildDir)/binutils/Makefile ]; then rm $(buildDir)/binutils/Makefile fi
	if [ -f $(buildDir)/gcc/Makefile ]; then rm $(buildDir)/gcc/Makefile fi

##### getting file

fileGetter = ../../misc/tools/getFile
mirrorList = ../../misc/gnuToolsMirrors
../$(binutilsName).tar.bz2:
	sh $(fileGetter) $(mirrorList) binutils $(notdir $@) ..

../gcc-core-$(gccVer).tar.bz2:
	sh $(fileGetter) $(mirrorList) gcc/gcc-$(gccVer) $(notdir $@) ..

../gcc-g++-$(gccVer).tar.bz2:
	sh $(fileGetter) $(mirrorList) gcc/gcc-$(gccVer) $(notdir $@) ..


##### configure

../$(binutilsName)/configure: ../$(binutilsName).tar.bz2
	cd ..; tar -jxvf $(binutilsName).tar.bz2
	touch $@

../$(gccName)/configure: ../gcc-core-$(gccVer).tar.bz2
../$(gccName)/configure: ../gcc-g++-$(gccVer).tar.bz2
	cd ..; tar -jxvf gcc-core-$(gccVer).tar.bz2
	cd ..; tar -jxvf gcc-g++-$(gccVer).tar.bz2
	touch $@


##### build & install

$(buildDir)/binutils/Makefile: ../$(binutilsName)/configure
$(buildDir)/binutils/Makefile: ../../makefile.in
	if ! [ -d $(toolPath) ]; then mkdir $(toolPath); fi
	if ! [ -d $(buildDir) ]; then mkdir $(buildDir); fi
	if ! [ -d $(dir $@) ]; then mkdir $(dir $@); fi
	cd $(dir $@); ../../../$(binutilsName)/configure $(binutilsOptions)

$(prefix)as: $(buildDir)/binutils/Makefile
	make -C $(buildDir)/binutils -j7
	make -C $(buildDir)/binutils -j7 install


$(buildDir)/gcc/Makefile: ../$(gccName)/configure $(prefix)as
$(buildDir)/gcc/Makefile: ../../makefile.in
	if ! [ -d $(dir $@) ]; then mkdir $(dir $@); fi
	cd $(dir $@); ../../../$(gccName)/configure $(gccOptions)

$(prefix)gcc: $(buildDir)/gcc/Makefile
	make -C $(buildDir)/gcc -j7 all-gcc
	make -C $(buildDir)/gcc -j7 install-gcc

